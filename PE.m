(* ::Package:: *)

(* Mathematica Package         *)

(* :Title: ProjectEuler     *)

(* :Context: ProjectEuler`  *)

(* :Package Version: 1.0       *)

(* :Mathematica Version:       *)

(* :Copyright:                 *)

(* :Keywords:                  *)

(* :Discussion:                *)

BeginPackage["ProjectEuler`"]

(* Exported symbols added here with SymbolName::usage *)

PE001::usage = ""

PE002::usage = ""

PE003::usage = ""

PE004::usage = ""

PE005::usage = ""

PE006::usage = ""

PE007::usage = ""

PE008::usage = ""

PE009::usage = ""

PE010::usage = ""

PE011::usage = ""

PE012::usage = ""

PE013::usage = ""

PE014::usage = ""

PE015::usage = ""

PE016::usage = ""

PE017::usage = ""

PE018::usage = ""

PE019::usage = ""

PE020::usage = ""

PE021::usage = ""

PE022::usage = ""

PE023::usage = ""

PE024::usage = ""

PE025::usage = ""

PE026::usage = ""

PE027::usage = ""

PE028::usage = ""

PE029::usage = ""

PE030::usage = ""

Begin["`Private`"] (* Begin Private Context *)

PE001[] :=
    Total[Cases[Range[999], x_ /; Mod[x, 3] == 0 || Mod[x, 5] == 0]]

PE002[] :=
    Module[{fib},
        fib[1] = fib[2] = 1;
        fib[n_] := fib[n] = fib[n - 1] + fib[n - 2];
        SetAttributes[fib, Listable];
        Cases[fib[Range[34]], _?EvenQ] // Total
    ]

PE003[] :=
    Max[FactorInteger[600851475143]]

PE004[] :=
    Flatten[# * Range[#, 999]& /@ Range[100, 999]] ~ Cases ~
            Module[{xd},
                x_ /;
                    (
                        xd = IntegerDigits[x];
                        xd == Reverse[xd]
                    )
            ] // Max

PE005[] :=
    LCM @@ Range[20]

PE006[] :=
    Total[Range[100]] ^ 2 - Total[#^2& /@ Range[100]]

PE007[] :=
    Prime[10001]

PE008[] :=
    Module[{num = "73167176531330624919225119674426574742355349194934"
         <> "96983520312774506326239578318016984801869478851843" <> "85861560789112949495459501737958331952853208805511"
         <> "12540698747158523863050715693290963295227443043557" <> "66896648950445244523161731856403098711121722383113"
         <> "62229893423380308135336276614282806444486645238749" <> "30358907296290491560440772390713810515859307960866"
         <> "70172427121883998797908792274921901699720888093776" <> "65727333001053367881220235421809751254540594752243"
         <> "52584907711670556013604839586446706324415722155397" <> "53697817977846174064955149290862569321978468622482"
         <> "83972241375657056057490261407972968652414535100474" <> "82166370484403199890008895243450658541227588666881"
         <> "16427171479924442928230863465674813919123162824586" <> "17866458359124566529476545682848912883142607690042"
         <> "24219022671055626321111109370544217506941658960408" <> "07198403850962455444362981230987879927244284909188"
         <> "84580156166097919133875499200524063689912560717606" <> "05886116467109405077541002256983155200055935729725"
         <> "71636269561882670428252483600823257530420752963450"},
        (Times @@ #)& /@ (ToExpression[StringPartition[#, 1]& /@ StringPartition[
            num, 13, 1]]) // Max
    ]

PE009[] :=
    (Times @@ #& /@ Select[Flatten[Table[{i, j, 1000 - i - j}, {i, 1,
         500}, {j, 1, 999 - i}], 1], #[[1]] ^ 2 + #[[2]] ^ 2 == #[[3]] ^ 2&]) ~
         Part ~ 1

PE010[] :=
    Module[{sum = 0, i = 1, p},
        While[
            (p = Prime[i]) < 2*^6
            ,
            sum += p;
            i++
        ];
        sum
    ]

PE011[] :=
    Module[{mat, vertical, horizontal, diagonal1, diagonal2},
        mat = Partition[ToExpression[StringSplit["08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08"
             <> " 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00" <>
             " 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65" <> " 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91"
             <> " 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80" <>
             " 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50" <> " 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70"
             <> " 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21" <>
             " 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72" <> " 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95"
             <> " 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92" <>
             " 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57" <> " 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58"
             <> " 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40" <>
             " 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66" <> " 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69"
             <> " 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36" <>
             " 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16" <> " 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54"
             <> " 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"]],
             20];
        vertical = Table[mat[[i]][[j]] mat[[i + 1]][[j]] mat[[i + 2]]
            [[j]] mat[[i + 3]][[j]], {i, 1, 17}, {j, 1, 20}];
        horizontal = Table[mat[[i]][[j]] mat[[i]][[j + 1]] mat[[i]][[
            j + 2]] mat[[i]][[j + 3]], {i, 1, 20}, {j, 1, 17}];
        diagonal1 = Table[mat[[i]][[j]] mat[[i + 1]][[j + 1]] mat[[i 
            + 2]][[j + 2]] mat[[i + 3]][[j + 3]], {i, 1, 17}, {j, 1, 17}];
        diagonal2 = Table[mat[[i]][[j]] mat[[i + 1]][[j - 1]] mat[[i 
            + 2]][[j - 2]] mat[[i + 3]][[j - 3]], {i, 1, 17}, {j, 4, 20}];
        Max[vertical, horizontal, diagonal1, diagonal2]
    ]

PE012[] :=
    Module[{tri, x},
        tri[n_] := Total[Range[n]];
        x = 1;
        While[Length[Divisors[tri[x]]] < 500, x++];
        tri[x]
    ]

PE013[] :=
    Module[{num},
        num = "37107287533902102798797998220837590246510135740250 " <>
             "46376937677490009712648124896970078050417018260538 " <> "74324986199524741059474233309513058123726617309629 "
             <> "91942213363574161572522430563301811072406154908250 " <> "23067588207539346171171980310421047513778063246676 "
             <> "89261670696623633820136378418383684178734361726757 " <> "28112879812849979408065481931592621691275889832738 "
             <> "44274228917432520321923589422876796487670272189318 " <> "47451445736001306439091167216856844588711603153276 "
             <> "70386486105843025439939619828917593665686757934951 " <> "62176457141856560629502157223196586755079324193331 "
             <> "64906352462741904929101432445813822663347944758178 " <> "92575867718337217661963751590579239728245598838407 "
             <> "58203565325359399008402633568948830189458628227828 " <> "80181199384826282014278194139940567587151170094390 "
             <> "35398664372827112653829987240784473053190104293586 " <> "86515506006295864861532075273371959191420517255829 "
             <> "71693888707715466499115593487603532921714970056938 " <> "54370070576826684624621495650076471787294438377604 "
             <> "53282654108756828443191190634694037855217779295145 " <> "36123272525000296071075082563815656710885258350721 "
             <> "45876576172410976447339110607218265236877223636045 " <> "17423706905851860660448207621209813287860733969412 "
             <> "81142660418086830619328460811191061556940512689692 " <> "51934325451728388641918047049293215058642563049483 "
             <> "62467221648435076201727918039944693004732956340691 " <> "15732444386908125794514089057706229429197107928209 "
             <> "55037687525678773091862540744969844508330393682126 " <> "18336384825330154686196124348767681297534375946515 "
             <> "80386287592878490201521685554828717201219257766954 " <> "78182833757993103614740356856449095527097864797581 "
             <> "16726320100436897842553539920931837441497806860984 " <> "48403098129077791799088218795327364475675590848030 "
             <> "87086987551392711854517078544161852424320693150332 " <> "59959406895756536782107074926966537676326235447210 "
             <> "69793950679652694742597709739166693763042633987085 " <> "41052684708299085211399427365734116182760315001271 "
             <> "65378607361501080857009149939512557028198746004375 " <> "35829035317434717326932123578154982629742552737307 "
             <> "94953759765105305946966067683156574377167401875275 " <> "88902802571733229619176668713819931811048770190271 "
             <> "25267680276078003013678680992525463401061632866526 " <> "36270218540497705585629946580636237993140746255962 "
             <> "24074486908231174977792365466257246923322810917141 " <> "91430288197103288597806669760892938638285025333403 "
             <> "34413065578016127815921815005561868836468420090470 " <> "23053081172816430487623791969842487255036638784583 "
             <> "11487696932154902810424020138335124462181441773470 " <> "63783299490636259666498587618221225225512486764533 "
             <> "67720186971698544312419572409913959008952310058822 " <> "95548255300263520781532296796249481641953868218774 "
             <> "76085327132285723110424803456124867697064507995236 " <> "37774242535411291684276865538926205024910326572967 "
             <> "23701913275725675285653248258265463092207058596522 " <> "29798860272258331913126375147341994889534765745501 "
             <> "18495701454879288984856827726077713721403798879715 " <> "38298203783031473527721580348144513491373226651381 "
             <> "34829543829199918180278916522431027392251122869539 " <> "40957953066405232632538044100059654939159879593635 "
             <> "29746152185502371307642255121183693803580388584903 " <> "41698116222072977186158236678424689157993532961922 "
             <> "62467957194401269043877107275048102390895523597457 " <> "23189706772547915061505504953922979530901129967519 "
             <> "86188088225875314529584099251203829009407770775672 " <> "11306739708304724483816533873502340845647058077308 "
             <> "82959174767140363198008187129011875491310547126581 " <> "97623331044818386269515456334926366572897563400500 "
             <> "42846280183517070527831839425882145521227251250327 " <> "55121603546981200581762165212827652751691296897789 "
             <> "32238195734329339946437501907836945765883352399886 " <> "75506164965184775180738168837861091527357929701337 "
             <> "62177842752192623401942399639168044983993173312731 " <> "32924185707147349566916674687634660915035914677504 "
             <> "99518671430235219628894890102423325116913619626622 " <> "73267460800591547471830798392868535206946944540724 "
             <> "76841822524674417161514036427982273348055556214818 " <> "97142617910342598647204516893989422179826088076852 "
             <> "87783646182799346313767754307809363333018982642090 " <> "10848802521674670883215120185883543223812876952786 "
             <> "71329612474782464538636993009049310363619763878039 " <> "62184073572399794223406235393808339651327408011116 "
             <> "66627891981488087797941876876144230030984490851411 " <> "60661826293682836764744779239180335110989069790714 "
             <> "85786944089552990653640447425576083659976645795096 " <> "66024396409905389607120198219976047599490197230297 "
             <> "64913982680032973156037120041377903785566085089252 " <> "16730939319872750275468906903707539413042652315011 "
             <> "94809377245048795150954100921645863754710598436791 " <> "78639167021187492431995700641917969777599028300699 "
             <> "15368713711936614952811305876380278410754449733078 " <> "40789923115535562561142322423255033685442488917353 "
             <> "44889911501440648020369068063960672322193204149535 " <> "41503128880339536053299340368006977710650566631954 "
             <> "81234880673210146739058568557934581403627822703280 " <> "82616570773948327592232845941706525094512325230608 "
             <> "22918802058777319719839450180888072429661980811197 " <> "77158542502016545090413245809786882778948721859617 "
             <> "72107838435069186155435662884062257473692284509516 " <> "20849603980134001723930671666823555245252804609722 "
             <> "53503534226472524250874054075591789781264330331690 ";
        (
                StringSplit[num] //
                ToExpression //
                Total //
                IntegerDigits
            )[[1 ;; 10]] // FromDigits
    ]

PE014[] :=
    Module[{f},
        f[1] = 1;
        f[n_?EvenQ] := f[n] = f[n / 2] + 1;
        f[n_?OddQ] := f[n] = f[3 n + 1] + 1;
        Ordering[f /@ Range[1*^6], -1][[1]]
    ]

PE015[] :=
    Module[{grid},
        grid[_, 21] = grid[21, _] = 1;
        grid[x_, y_] := grid[x, y] = grid[x, y + 1] + grid[x + 1, y];
            
        grid[1, 1]
    ]

PE016[] :=
    2^1000 //
    IntegerDigits //
    Total

PE017[] :=
    Module[{str1 = {"one", "two", "three", "four", "five", "six", "seven",
         "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", 
        "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", "twenty"},
         str2 = {"ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy",
         "eighty", "ninety"}, lc},
        lc[n_] := StringLength[str1[[n]]] /; n <= 20;
        lc[n_] := StringLength[str2[[n / 10]]] /; Mod[n, 10] == 0 && 
            n < 100;
        lc[n_] := lc[QuotientRemainder[n, 10][[1]] * 10] + lc[QuotientRemainder[
            n, 10][[2]]] /; 20 < n < 100;
        lc[n_] := StringLength[str1[[n / 100]]] + StringLength["hundred"
            ] /; 100 <= n < 1000 && Mod[n, 100] == 0;
        lc[n_] := lc[QuotientRemainder[n, 100][[1]] * 100] + StringLength[
            "and"] + lc[QuotientRemainder[n, 100][[2]]] /; 100 < n < 1000;
        lc[1000] = StringLength["onethousand"];
        lc /@ Range[1000] // Total
    ]

PE018[] :=
    Module[{mat = {{75}, {95, 64}, {17, 47, 82}, {18, 35, 87, 10}, {20,
         04, 82, 47, 65}, {19, 01, 23, 75, 03, 34}, {88, 02, 77, 73, 07, 63, 
        67}, {99, 65, 04, 28, 06, 16, 70, 92}, {41, 41, 26, 56, 83, 40, 80, 70,
         33}, {41, 48, 72, 33, 47, 32, 37, 16, 94, 29}, {53, 71, 44, 65, 25, 
        43, 91, 52, 97, 51, 14}, {70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17,
         57}, {91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48}, {63, 66, 
        04, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31}, {04, 62, 98, 27, 23,
         09, 70, 98, 73, 93, 38, 53, 60, 04, 23}}, f},
        f[15, y_] := mat[[15, y]];
        f[x_, y_] := f[x, y] = mat[[x, y]] + Max[f[x + 1, y], f[x + 1,
             y + 1]];
        f[1, 1]
    ]

PE019[] :=
    Module[{days, theday},
        days[year_, month_] := 31 /; MemberQ[{1, 3, 5, 7, 8, 10, 12},
             month];
        days[year_, month_] := 30 /; MemberQ[{4, 6, 9, 11}, month];
        days[year_, 2] := 29 /; Mod[year, 400] == 0 || (Mod[year, 100
            ] != 0 && Mod[year, 4] == 0);
        days[_, _] := 28;
        theday[1900, 1] = 1;
        theday[year_, month_ /; month != 1] := theday[year, month] = 
            theday[year, month - 1] + days[year, month - 1];
        theday[year_, month_ /; month == 1] := theday[year, month] = 
            theday[year - 1, 12] + days[year - 1, 12];
        Cases[Flatten[Table[theday[i, j], {i, 1901, 2000}, {j, 1, 12}
            ]], x_ /; Mod[x, 7] == 0] // Length
    ]

PE020[] :=
    IntegerDigits[Factorial[100]] // Total

PE021[] :=
    Module[{d},
        d[n_] := Divisors[n][[1 ;; -2]] // Total;
        Cases[Range[2, 10000], x_ /; d @ d @ x == x && d @ x != x] //
             Total
    ]

PE022[] :=
    Module[{data = StringSplit[Import["./p022_names.txt"], ","] // Sort,
         f},
        f[name_] := Total[ToCharacterCode[#] - ToCharacterCode["A"] +
             1& /@ StringPartition[name, 1][[2 ;; -2]]][[1]];
        Total[Table[i * f[data[[i]]], {i, 1, Length[data]}]]
    ]

PE023[] :=
    Module[
        {abundant}
        ,
        (*28123*)
        abundant := Cases[Range[12, 28123], x_ /; Total[Divisors[x][[
            1 ;; -2]]] > x];
        Complement[Range[28123], DeleteDuplicates[Total /@ Tuples[abundant,
             2]]] // Total
    ]

PE024[] :=
    Module[{nums = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, target = 1*^6 - 1,
         q, r, ans = {}},
        While[
            Length[nums] > 0
            ,
            {q, r} = QuotientRemainder[target, (Length[nums] - 1)!];
            AppendTo[ans, nums[[q + 1]]];
            nums = DeleteCases[nums, nums[[q + 1]]];
            target = r;
        ];
        FromDigits[ans]
    ]

PE025[] :=
    Module[{x = 1},
        While[Length[IntegerDigits[Fibonacci[x]]] < 1000, x++;];
        x
    ]

PE026[] :=
    Sort[Cases[Table[{i, RealDigits[1 / i]}, {i, 1, 1000}], {_, {{___,
         {___}}, _}}], Length[#1[[2, 1, -1]]] > Length[#2[[2, 1, -1]]]&][[1]]

PE027[] :=
    Sort[Flatten[Table[{Length[NestWhileList[# + 1&, 0, PrimeQ[#^2 + 
        a * # + b]&]], a b}, {a, -999, 999}, {b, -1000, 1000}], 1], #1[[1]] >
         #2[[1]]&][[1, 2]]

PE028[] :=
    ((#^2) + (#^2 - (# - 1)) + (#^2 - 2 (# - 1)) + (#^2 - 3 (# - 1))&
         /@ Range[3, 1001, 2] // Total) + 1

PE029[] :=
    Union[Flatten[Table[a^b, {a, 2, 100}, {b, 2, 100}]]] // Length

PE030[] :=
    Cases[Range[2, 6 * 9^5], x_ /; Total[Map[#^5&, IntegerDigits[x]]]
         == x] // Total

PE031[] :=
    Module[{f, coins = {1, 2, 5, 10, 20, 50, 100, 200}},
        f[_, 1] := 1;
        f[1, _] := 1;
        f[i_, j_] := (f[i, j] = f[i, j - 1]) /; i < coins[[j]];
        f[i_, j_] := (f[i, j] = f[i, j - 1] + 1) /; i == coins[[j]];
        f[i_, j_] := (f[i, j] = f[i, j - 1] + f[i - coins[[j]], j]) /;
             i > coins[[j]];
        f[200, 8]
    ]

PE032[] :=
    Select[Flatten[Table[{x, y, x * y}, {x, 1, 99}, {y, 100, 9999}], 
        1], Sort[Join[IntegerDigits[#[[1]]], IntegerDigits[#[[2]]], IntegerDigits[
        #[[3]]]]] == Range[9]&][[All, 3]] //
    Union //
    Total

PE033[] :=
    Apply[Times, Select[Flatten[Table[{num, den, num / den}, {den, 11,
         99}, {num, 11, den - 1}], 1], IntegerDigits[#[[2]]][[2]] != 0 && IntegerDigits[
        #[[1]]][[1]] != IntegerDigits[#[[1]]][[2]] && IntegerDigits[#[[1]]][[
        2]] == IntegerDigits[#[[2]]][[1]] && IntegerDigits[#[[1]]][[1]] / IntegerDigits[
        #[[2]]][[2]] == #[[3]]&][[All, 3]]] // Denominator

PE034[] :=
    Cases[Range[3, 1*^7], x_ /; Total[Map[Factorial, IntegerDigits[x]
        ]] == x] // Total

PE035[] :=
    Cases[Range[1, 100], x_ /; FreeQ[PrimeQ /@ FromDigits /@ NestList[
        RotateLeft, IntegerDigits[x], Length[IntegerDigits[x]] - 1], False]] //
         Length

PE036[] :=
    Cases[Range[1*^6], x_ /; IntegerDigits[x] == Reverse[IntegerDigits[
        x]] && IntegerDigits[x, 2] == Reverse[IntegerDigits[x, 2]]] // Total

PE037[] :=
    Cases[Prime /@ Range[5, 100000], x_ /; FreeQ[PrimeQ /@ (Union[FromDigits
         /@ NestWhileList[#[[1 ;; -2]]&, IntegerDigits[x], Length[#] > 1&], FromDigits
         /@ NestWhileList[#[[2 ;; -1]]&, IntegerDigits[x], Length[#] > 1&]]),
         False]]

PE038[] :=
    FromDigits /@ Flatten /@ IntegerDigits /@ Flatten /@ (Cases[Join 
        @@@ Table[{i * j}, {i, 1, 9999}, {j, 1, Quotient[9, Length[IntegerDigits[
        i]]]}], x_ /; Sort[Flatten[IntegerDigits[x]]] == Range[9]]) // Max

PE039[] :=
    Sort[Table[{Count[Range[1, p / (2 + Sqrt[2])], a_ /; IntegerQ[(p^
        2 - 2 p a) / (2 p - 2 a)]], p}, {p, 2, 1000, 2}]][[-1, 2]]
        
        
PE040[]:=Module[{digits,cham},
digits[n_]:=Module[
{k},
k=1;
While[10^k(k-1/9)+1/9<n,k++];
k--
];

cham[n_]:=Module[{q,r,m},
m=n-(10^(digits[n]-1)(digits[n]-1-1/9)+1/9);
{q,r}=QuotientRemainder[m-1,digits[n]];
IntegerDigits[10^(digits[n]-1)+q][[r+1]]
];
Times@@(cham/@{1,10,100,1*^3,1*^4,1*^5,1*^6})
]

PE041[]:=Cases[FromDigits/@Flatten[Table[Permutations[Range[i]],{i,1,9}],1],x_/;PrimeQ[x]]//Max

PE042[]:=Count[Total[#]&/@(#-ToCharacterCode["A"][[1]]+1&/@#[[2;;-2]]&/@ToCharacterCode[StringSplit[Import["./p042_words.txt"], ","]]),x_/;IntegerQ[Sqrt[1+8x]]]

PE043[]:=FromDigits/@Cases[Permutations[Range[0,9]],x_/;x[[1]]!=0
&&IntegerQ[FromDigits[{x[[2]],x[[3]],x[[4]]}]/2]
&&IntegerQ[FromDigits[{x[[3]],x[[4]],x[[5]]}]/3]
&&IntegerQ[FromDigits[{x[[4]],x[[5]],x[[6]]}]/5]
&&IntegerQ[FromDigits[{x[[5]],x[[6]],x[[7]]}]/7]
&&IntegerQ[FromDigits[{x[[6]],x[[7]],x[[8]]}]/11]
&&IntegerQ[FromDigits[{x[[7]],x[[8]],x[[9]]}]/13]
&&IntegerQ[FromDigits[{x[[8]],x[[9]],x[[10]]}]/17]]//Total

PE044[]:=Module[{pentas=Table[n (3n-1)/2,{n,1,3000}],pentaQ,check},
pentaQ[p_]:=IntegerQ[(1+Sqrt[1+24p])/6];
check[i_,j_]:=pentaQ[i+j]&&pentaQ[j-i];
Cases[Permutations[pentas,{2}],pair_/;pair[[1]]<pair[[2]]&&check[pair[[1]],pair[[2]]]]//#[[1,2]]-#[[1,1]]&

]

PE045[]:=Module[{n=144,hexa,tQ,pQ},
tQ[n_]:=IntegerQ[(-1+Sqrt[1+8n])/2];
pQ[n_]:=IntegerQ[(1+Sqrt[1+24n])/6];
hexa[n_]:=n(2n-1);

While[!(tQ[hexa[n]]&&pQ[hexa[n]]),
n++];
hexa[n]
]

PE046[]:=Module[{gbQ},
gbQ[n_]:=Block[{i=1,max=Floor[Sqrt[(n-2)/2]],flag=False},
While[i<=max,
If[PrimeQ[n-2i^2],
flag=True;
Break];
i+=1
];
flag
];
Select[Select[Select[Range[9999],OddQ],CompositeQ],!gbQ[#]&]//Min
]

PE047[]:=Cases[Partition[Range[1*^6],4,1],x_/;(Length[FactorInteger[#]]&/@x=={4,4,4,4})][[1,1]]

PE048[]:=(#^#&/@Range[1000]//Total//IntegerDigits)[[-10;;-1]]//FromDigits

PE049[]:=Module[{seq},
seq[n_]:=Block[{perm,list},
perm=Sort[Select[FromDigits/@Permutations[IntegerDigits[n]],#>n&]];
list=Flatten[Table[{n,perm[[i]],perm[[j]]},{i,1,Length[perm]-1},{j,i+1,Length[perm]}],1]
];
#[[1]]*1*^8+#[[2]]*1*^4+#[[3]]&/@Select[Flatten[seq/@Range[1000,9999],1],#[[1]]+#[[3]]==2#[[2]]&&PrimeQ[#[[1]]]&&PrimeQ[#[[2]]]&&PrimeQ[#[[3]]]&]
]

PE050[]:=Module[{primes=Prime[Range[78498]],m,i,sum,flag=False},
For[m=1000,True,m--,
i=1;
While[(sum=Total[primes[[#]]&/@Range[i,i+m-1]])<1*^6,
If[PrimeQ[sum],
flag=True;Break[]];
i++;
];
If[flag,Break[]]
];
sum
]


End[] (* End Private Context *)

EndPackage[]
